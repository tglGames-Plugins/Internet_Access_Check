name: Reusable Deploy and Transform Workflow

on:
  workflow_call:
    inputs:
      source_branch:
        description: 'Source branch to deploy from'
        required: true
        type: string
      dirs_to_rename:
        description: 'Comma-separated list of directories to rename'
        required: true
        type: string
      commit_message:
        description: 'Optional commit message (max 250 chars)'
        required: false
        type: string
        default: ''

jobs:
  deploy-and-rename:
    name: Deploy and Rename on Main
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Added timeout (30 minutes)
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_branch }}
          
      - name: Rename, Commit, and Push
        run: |
          set -eo pipefail
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          # Process directory renaming
          echo "Processing directory list: ${{ inputs.dirs_to_rename }}"
          echo "${{ inputs.dirs_to_rename }}" | tr ',' '\n' | while IFS= read -r raw_dir; do
            dir=$(echo "$raw_dir" | xargs)
            if [ -n "$dir" ]; then
              if [ -d "$dir" ]; then
                mv "$dir" "${dir}~"
                echo -e "${GREEN}✓ Renamed '$dir' to '${dir}~'${NC}"
              else
                echo -e "${YELLOW}⚠ Directory '$dir' not found. Skipping.${NC}"
              fi
            fi
          done
          
          # Configure Git
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Commit and push if changes exist
          git add -A
          if [[ -z $(git status --porcelain) ]]; then
            echo -e "${YELLOW}⚠ No changes detected. Skipping deployment.${NC}"
            exit 0
          fi
          
          # Handle commit message
          CUSTOM_MSG="$(echo '${{ inputs.commit_message }}' | xargs)"
          if [ -n "$CUSTOM_MSG" ]; then
            # Truncate to 250 characters if needed
            if [ ${#CUSTOM_MSG} -gt 250 ]; then
              echo -e "${YELLOW}⚠ Commit message truncated to 250 characters${NC}"
              COMMIT_MSG="${CUSTOM_MSG:0:250}"
            else
              COMMIT_MSG="$CUSTOM_MSG"
            fi
            echo -e "${GREEN}✓ Using custom commit message${NC}"
          else
            COMMIT_MSG="Automated deployment: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo -e "${GREEN}✓ Using timestamp commit message${NC}"
          fi
          
          git commit -m "$COMMIT_MSG"
          
          echo -e "${GREEN}↑ Force-pushing to main...${NC}"
          git push origin HEAD:refs/heads/main --force || {
            echo -e "${RED}✖ Error pushing to main!${NC}"
            exit 1
          }
          echo -e "${GREEN}✔ Successfully deployed to main!${NC}"
